#line 2 "/home/ebrio/Téléchargements/proj/build/scanner.cpp"

#line 4 "/home/ebrio/Téléchargements/proj/build/scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int Scanner::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 62
#define YY_END_OF_BUFFER 63
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[287] =
    {   0,
        0,    0,   63,   62,   57,   58,   10,   62,   15,   62,
        6,    7,    2,    1,   14,    3,    5,   56,   13,   28,
        4,   29,   62,   59,   59,   59,   59,   59,   59,   11,
       12,   59,   59,   59,   59,   59,   59,   59,   59,   59,
        8,    9,   57,   58,   25,   36,   38,   33,    0,   32,
        0,   55,    0,   56,   26,   24,   27,    0,    0,    0,
        0,   59,   59,   59,   59,   59,   20,    0,   59,   59,
       59,   59,   59,   59,   59,   59,   53,   59,   59,    0,
        0,   33,    0,    0,   32,   32,   55,    0,    0,    0,
        0,    0,    0,    0,    0,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   30,   59,    0,   59,   46,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,    0,
       37,    0,   39,   33,    0,   34,    0,   32,    0,   32,
        0,    0,    0,    0,    0,    0,    0,    0,   59,   59,
       59,   59,   59,   59,   19,   59,   59,   17,   59,   59,
        0,   59,   59,   59,   59,   59,   59,   59,   41,   59,
       59,   59,   33,    0,    0,   32,    0,   32,    0,    0,
        0,    0,    0,    0,    0,    0,   59,   59,   59,   59,
       59,   21,   21,   23,   22,   18,   59,   59,   59,   45,
       59,   59,   59,   59,   59,   59,   33,    0,    0,   16,

        0,   54,    0,    0,    0,    0,    0,    0,   59,   59,
       59,   59,   59,   59,   59,   59,   47,   59,   59,   59,
       35,   33,   31,   16,   42,    0,    0,    0,    0,    0,
       60,   59,   59,   59,   59,   59,   59,   59,   49,   48,
       52,   59,   33,    0,    0,    0,    0,    0,   59,   59,
       59,   59,   59,   59,   44,   59,   33,    0,    0,   59,
       59,   59,   59,   33,   43,    0,    0,   59,   59,   59,
       59,   40,    0,    0,   59,   59,   51,   59,    0,    0,
       59,   59,   50,    0,   59,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    1,    6,    1,    7,    8,
        9,   10,   11,   12,   13,    1,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    1,   17,
       18,   19,    1,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   28,   28,   30,   28,   31,   32,   33,
       28,   34,   35,   36,   37,   28,   28,   28,   38,   28,
       39,   40,   41,    1,    1,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   28,   28,   51,   28,   52,
       53,   54,   28,   55,   56,   57,   58,   28,   28,   59,
       60,   28,   61,    1,   62,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[299] =
    {   0,
        0,    0,  517, 1603,  513,  511,   45,    0,  506,   57,
     1603, 1603, 1603, 1603, 1603, 1603, 1603,  495, 1603,  491,
      490,  489,   41,   97,   36,   38,   39,   43,  131,  491,
     1603,  132,  135,   42,  133,  138,  139,  162,  145,   45,
     1603, 1603,  502,  498, 1603,  455,  454,   43,    0,  480,
      157, 1603,  159,  470, 1603, 1603, 1603,  454,  442,  447,
      154,  176,  182,  192,  209,  220,  226,   68,  236,  242,
      253,  266,  277,  283,  299,  310,  293,  323,  338,  176,
      193,  131,  196,    0,    0,  170,  209,  447,  434,  435,
      417,  421,  415,  399,  394,  348,  354,  370,  376,  387,

      403,  411,  439,  447,  431,  467,  435,  475,  483,  499,
      500,  515,  528,  543,  544,  559,  560,  576,  584,  213,
     1603,  240, 1603,  264,  273, 1603,    0,  302,  443,  354,
      419,  416,  408,  381,  377,  379,  386,  364,  592,  600,
      608,  624,  625,  635,  652,  660,  668,  684,  692,  708,
      275,  721,  736,  749,  766,  767,  783,  791,  801,  807,
      823,  829,  334,    0,  416,  374,  403,  382,  371,  361,
      356,  324,  314,  321,  320,  311,  840,  851,  862,  868,
      879,  890,  896,  906,  907, 1603,  924,  934,  935,  951,
      959,  967,  983,  994, 1007, 1018,  354,    0,  350,    0,

      326, 1603,  314,  299,  285,  279,  270,  272, 1024, 1035,
     1046, 1057, 1070, 1081, 1094, 1105, 1118, 1129, 1142, 1157,
     1167,  372, 1603, 1603, 1603,  291,  253,  243,  241,  227,
     1603, 1173, 1184, 1195, 1206, 1217, 1228, 1239, 1245, 1256,
     1267, 1273,  377,  247,  213,  206,  204,  206, 1284, 1300,
     1308, 1316, 1324, 1340, 1341, 1351,  379,  226,  183, 1373,
     1381, 1357, 1397,  208, 1603,  187,  184, 1398, 1414, 1427,
     1438, 1449,  172,  159, 1455, 1466, 1482, 1483,  156,  143,
     1498, 1511, 1522,  133, 1528, 1603,  175, 1584,  169, 1587,
      168, 1590,   97, 1593, 1596,   83, 1599,   82

    } ;

static const flex_int16_t yy_def[299] =
    {   0,
      286,    1,  286,  286,  286,  286,  286,  287,  286,  288,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,   24,   24,   24,   24,   24,  286,
      286,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      286,  286,  286,  286,  286,  286,  286,  286,  289,  290,
      288,  286,  288,  286,  286,  286,  286,  286,  286,  286,
      286,   24,   24,   24,   24,   24,   24,  286,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  286,
      286,  286,  286,  291,  290,  292,  288,  286,  286,  286,
      286,  286,  286,  286,  286,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,  286,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  286,
      286,  286,  286,  286,  286,  286,  293,  292,  294,  295,
      286,  286,  286,  286,  286,  286,  286,  286,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      286,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  286,  296,  297,  292,  294,  295,  286,  286,
      286,  286,  286,  286,  286,  286,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  286,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  286,  298,  297,  290,

      286,  286,  286,  286,  286,  286,  286,  286,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  286,  286,  286,  286,  286,  286,   24,   24,
       24,   24,   24,   24,   24,   24,  286,  286,  286,   24,
       24,   24,   24,  286,  286,  286,  286,   24,   24,   24,
       24,   24,  286,  286,   24,   24,   24,   24,  286,  286,
       24,   24,   24,  286,   24,    0,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286

    } ;

static const flex_int16_t yy_nxt[1666] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   25,   25,   26,   25,   25,   25,   25,
       25,   25,   27,   28,   29,   25,   25,   25,   30,    4,
       31,   24,   25,   32,   25,   33,   26,   25,   34,   35,
       36,   25,   37,   38,   28,   39,   40,   25,   25,   25,
       41,   42,   45,   52,   58,   62,   64,   62,   62,   66,
       65,   62,   62,   46,   62,   59,   60,   47,   82,  107,
       48,   83,   68,   72,  223,  198,   62,   64,   62,   62,
       66,   65,   62,   62,   79,   62,   53,   61,   61,  164,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   62,   61,   61,   61,   61,   61,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   63,   62,   62,   62,
       62,   62,   62,   62,   62,   61,   61,   61,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   63,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   61,   61,   67,
       62,   62,   62,   52,   62,   87,  124,   62,   62,   83,
      127,   84,  129,   67,   62,  130,   73,   49,  231,   74,
       67,   62,   62,   62,   69,   62,   71,   70,   62,   62,
      120,   62,   75,   65,   67,   62,   53,   91,   53,  284,

      231,   78,   92,   76,   93,   62,   94,  122,  266,   95,
      125,   62,   62,  101,   65,   52,  121,  280,  267,   96,
       77,   62,  103,  279,   97,   96,   98,  120,   99,  274,
       97,  100,   98,  123,  102,   96,  126,  100,   62,  273,
       97,  105,   98,  103,   99,  104,   83,  100,   53,   62,
      265,  231,   96,  121,  122,   62,  106,   97,  231,   98,
      231,   99,  105,   96,  100,   62,  104,  259,   97,   96,
       98,   62,   99,  258,   97,  100,   98,  106,   99,   96,
      123,  100,   62,  248,   97,   96,   98,  125,   99,  151,
       97,  100,   98,  108,   99,   62,  110,  109,  247,  163,

      246,   97,   83,   98,  129,   99,   62,  130,  100,   96,
      245,  244,   62,  126,   97,  186,   98,  231,   99,  230,
       96,  100,   62,  111,  229,   97,   96,   98,   62,  112,
      228,   97,  100,   98,  113,   99,   96,  114,  100,   62,
      115,   97,   96,   98,  227,   99,  226,   97,  100,   98,
      225,   99,   62,   96,  100,  224,  167,  116,   97,  168,
       98,  208,   99,  207,  117,  100,   96,   62,  206,  197,
      205,   97,   83,   98,  204,   99,  129,   62,  100,  130,
      203,   96,  118,   62,  167,  202,   97,  200,   98,  222,
       99,   96,   83,  100,  119,  140,   97,   96,   98,   62,

      139,  201,   97,  100,   98,   62,   99,  243,  165,  100,
       83,  141,  257,   96,  264,   83,   62,   83,   97,   96,
       98,  199,   99,  176,   97,  100,   98,  175,   99,  142,
       96,  100,   62,  174,  173,   97,  144,   98,  172,   99,
       62,  171,  100,  143,  144,  170,   96,  169,  165,  151,
      138,   97,  137,   98,   96,   99,  136,  144,  100,   97,
       62,   98,  135,   99,  142,  144,  100,  145,   62,  134,
      133,  132,  131,  146,   96,   90,   62,   89,   88,   97,
      148,   98,   96,   99,   54,   86,  100,   97,  145,   98,
       96,   99,   81,   80,  147,   97,   62,   98,  149,   99,

       44,  148,  100,   43,   62,   68,   57,   56,   55,   54,
       96,   50,   62,   44,   43,   97,  286,   98,   96,  150,
      286,  286,  100,   97,  286,  152,   96,   99,   62,   62,
      100,   97,  286,   98,  286,   99,  286,  286,  100,  143,
      286,  286,   96,   96,   62,  286,  286,   97,   97,   98,
       98,  153,   99,  286,  100,  100,  154,   62,   96,  286,
      286,  286,  286,   97,  286,   98,  155,   99,  142,  286,
      100,   96,   62,   62,  286,  156,   97,  286,   98,  286,
       99,  286,  286,  100,  286,  286,   96,  158,   62,   62,
      157,   97,   97,   98,   98,   99,   99,  286,  100,  100,

      286,  160,   96,   96,  159,   62,  286,   97,   97,   98,
       98,   99,   99,   62,  100,  100,  286,  286,  286,   96,
      286,   62,  286,  286,   97,  286,  161,   96,   99,   62,
      286,  100,   97,  286,   98,   96,   99,   62,  162,  100,
       97,  286,   98,   96,   99,  142,  286,  100,   97,  177,
       98,   96,   99,   62,   62,  100,   97,  178,   98,  286,
       99,  286,  179,  100,   62,  180,  286,   96,   96,  182,
      286,  286,   97,   97,   98,   98,   99,   99,   96,  100,
      100,   62,  286,   97,  181,   98,  286,   99,  184,   62,
      183,  286,  286,  286,  286,   96,  184,   62,  286,  286,

       97,  286,   98,   96,   99,  286,  286,  100,   97,  184,
       98,   96,   99,   62,  286,  100,   97,  184,   98,  286,
       99,   62,  185,  100,  143,  286,  286,   96,  286,  286,
      286,  286,   97,  286,   98,   96,   99,   62,  185,  100,
       97,  286,   98,  185,   99,  286,  286,  100,  286,  286,
       62,   96,  286,  286,  286,  286,   97,  286,   98,  185,
       99,  142,  141,  100,   96,   62,  187,  286,  286,   97,
      286,   98,  286,   99,  286,  286,  100,  286,   62,   96,
      188,  286,  286,  286,   97,  286,   98,  286,   99,  142,
      286,  100,   96,  177,  189,   62,   62,   97,  286,   98,

      286,   99,  286,  286,  100,  286,  286,  286,  286,   96,
       96,  190,   62,  286,   97,   97,   98,   98,   99,   99,
       62,  100,  100,  286,  191,  286,   96,  286,  192,  286,
       62,   97,  286,   98,   96,   99,   62,  286,  100,   97,
      193,   98,  286,  139,   96,  286,  100,  286,  286,   97,
       96,   98,   62,   99,  194,   97,  100,   98,   62,   99,
      286,  286,  100,  286,  141,  286,   96,  286,  195,   62,
      286,   97,   96,   98,  196,   99,  286,   97,  100,   98,
       62,   99,  286,   96,  100,  286,  286,  286,   97,  286,
      209,   62,   99,  286,   96,  100,  286,   62,  286,   97,

      286,   98,  286,   99,  286,   96,  100,  210,   62,  211,
       97,  212,   98,  286,   99,  286,   97,  100,   98,   62,
       99,  286,   96,  100,  286,   62,  286,   97,  286,  213,
      286,   99,  286,   96,  100,   62,   62,  286,   97,   96,
       98,  286,   99,  286,   97,  100,   98,  286,   99,   96,
       96,  100,  143,   62,   97,   97,   98,   98,   99,   99,
      286,  100,  100,   62,   62,  286,  286,   96,  286,  286,
      286,  286,   97,  286,   98,  215,   99,   96,   96,  100,
       62,  214,   97,   97,   98,   98,   99,   99,   62,  100,
      100,  286,  216,  286,   96,  286,   62,  286,  286,   97,

      286,   98,   96,   99,  217,  286,  100,   97,  286,   98,
       96,   99,   62,  286,  100,   97,  286,   98,  286,   99,
      286,  286,  100,   62,  218,  286,   96,  286,  286,  286,
      286,   97,  221,   98,  286,   99,   62,   96,  100,  219,
      286,  286,   97,  286,   98,  286,   99,   62,  220,  100,
       96,  286,  286,   62,  286,   97,  286,   98,  286,   99,
      286,   96,  100,  286,   62,  141,   97,   96,   98,  232,
       99,  286,   97,  100,   98,   62,   99,  286,   96,  100,
      233,  286,  286,   97,  286,   98,   62,   99,  286,   96,
      100,  234,  286,  286,   97,  286,   98,  286,   99,   62,

       96,  100,  286,  286,  286,   97,  235,   98,  286,  139,
       62,  141,  100,   96,  286,  236,  286,  286,   97,  286,
       98,  286,   99,   62,   96,  100,  286,  286,  286,   97,
      286,   98,  286,   99,   62,  237,  100,   96,  286,  286,
      286,  238,   97,  286,   98,  286,   99,   62,   96,  100,
      286,  286,  286,   97,  286,   98,  286,   99,   62,  239,
      100,   96,  286,  286,  286,  286,   97,  286,   98,  286,
       99,   62,   96,  100,  286,  286,  286,   97,  286,   98,
      286,   99,  286,  240,  100,   96,   62,  241,  286,  286,
       97,  286,   98,  286,   99,  286,   62,  100,  242,  286,

       96,  286,   62,  286,  286,   97,  286,   98,  286,   99,
       96,  286,  100,   62,  286,   97,   96,   98,  286,   99,
      286,   97,  100,   98,   62,   99,  286,   96,  100,  286,
      249,  286,   97,  286,   98,   62,   99,  286,   96,  100,
      286,  250,  286,   97,  286,   98,   62,   99,  286,   96,
      100,  286,  251,  253,   97,  286,   98,   62,   99,  286,
       96,  100,  252,  254,  286,   97,  286,   98,   62,   99,
      286,   96,  100,  286,   62,  286,   97,  286,   98,  286,
       99,  286,   96,  100,  255,   62,  286,   97,   96,   98,
      286,   99,  286,   97,  100,   98,   62,   99,  286,   96,

      100,  286,   62,  286,   97,  286,   98,  286,   99,  286,
       96,  100,  286,   62,  286,   97,   96,   98,  286,   99,
      286,   97,  100,   98,  286,   99,  256,   96,  100,   62,
      286,  286,   97,  286,   98,  286,   99,   62,  260,  100,
      286,  286,  286,   96,  286,   62,  286,  286,   97,  286,
       98,   96,   99,   62,  236,  100,   97,  286,   98,   96,
       99,  236,  236,  100,   97,  286,   98,   96,   99,   62,
       62,  100,   97,  286,   98,  286,  261,  286,  286,  100,
       62,  286,  286,   96,   96,  262,   62,  286,   97,   97,
       98,   98,   99,   99,   96,  100,  100,  286,  268,  263,

       96,   98,   62,   99,  286,   97,  100,   98,  269,   99,
       62,  286,  100,  286,  286,  271,   96,  286,  286,  286,
      286,   97,  286,   98,   96,   99,   62,   62,  100,   97,
      286,   98,  270,   99,  142,  286,  100,  286,  140,  286,
       96,   96,  272,   62,  286,   97,   97,   98,   98,   99,
      275,  286,  100,  100,  286,  286,   62,   96,  286,  276,
      286,  286,   97,  286,   98,  286,   99,   62,  286,  100,
       96,  277,  286,  286,  286,   97,  286,   98,   62,   99,
      286,   96,  100,  286,   62,  286,   97,  286,   98,  286,
       99,  286,   96,  100,  278,   62,  286,   97,   96,   98,

      286,   99,  286,   97,  100,   98,  281,   99,  142,   96,
      100,   62,   62,  286,   97,  286,   98,  286,   99,  286,
      286,  100,  286,  286,  282,   96,   96,   62,  283,  286,
       97,   97,   98,   98,   99,   99,  286,  100,  100,  286,
       62,   96,  236,  286,  286,  286,   97,  286,   98,  286,
       99,   62,  286,  100,   96,  286,  286,   62,  286,   97,
      286,   98,  286,   99,  286,   96,  100,  285,  286,  286,
       97,   96,   98,  236,   99,  286,   97,  100,   98,  286,
       99,  286,  286,  100,   51,   51,   51,   85,  286,   85,
      128,  128,  128,  129,  129,  129,  166,  166,  166,  167,

      167,  167,    3,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286
    } ;

static const flex_int16_t yy_chk[1666] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    7,   10,   23,   25,   26,   26,   27,   28,
       27,   34,   28,    7,   40,   23,   23,    7,   48,   68,
        7,   48,   68,   34,  298,  296,   25,   26,   26,   27,
       28,   27,   34,   28,   40,   40,   10,   24,   24,  293,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   29,
       29,   32,   35,   51,   33,   53,   82,   36,   37,   82,
      291,  289,   86,   39,   39,   86,   35,  287,  284,   36,
       29,   29,   32,   35,   32,   33,   33,   32,   36,   37,
       80,   38,   37,   38,   39,   39,   51,   61,   53,  280,

      279,   39,   61,   38,   61,   62,   61,   81,  259,   61,
       83,   63,   38,   63,   38,   87,   80,  274,  259,   62,
       38,   64,   64,  273,   62,   63,   62,  120,   62,  267,
       63,   62,   63,   81,   63,   64,   83,   63,   65,  266,
       64,   66,   64,   64,   64,   65,  264,   64,   87,   66,
      258,  248,   65,  120,  122,   67,   67,   65,  247,   65,
      246,   65,   66,   66,   65,   69,   65,  245,   66,   67,
       66,   70,   66,  244,   67,   66,   67,   67,   67,   69,
      122,   67,   71,  230,   69,   70,   69,  125,   69,  151,
       70,   69,   70,   69,   70,   72,   71,   70,  229,  124,

      228,   71,  124,   71,  128,   71,   73,  128,   71,   72,
      227,  226,   74,  125,   72,  151,   72,  208,   72,  207,
       73,   72,   77,   72,  206,   73,   74,   73,   75,   73,
      205,   74,   73,   74,   74,   74,   77,   74,   74,   76,
       75,   77,   75,   77,  204,   77,  203,   75,   77,   75,
      201,   75,   78,   76,   75,  199,  130,   76,   76,  130,
       76,  176,   76,  175,   76,   76,   78,   79,  174,  163,
      173,   78,  163,   78,  172,   78,  166,   96,   78,  166,
      171,   79,   78,   97,  168,  170,   79,  168,   79,  197,
       79,   96,  197,   79,   79,   97,   96,   97,   96,   98,

       96,  169,   97,   96,   97,   99,   97,  222,  167,   97,
      222,   98,  243,   98,  257,  243,  100,  257,   98,   99,
       98,  165,   98,  138,   99,   98,   99,  137,   99,   99,
      100,   99,  101,  136,  135,  100,  101,  100,  134,  100,
      102,  133,  100,  100,  102,  132,  101,  131,  129,  107,
       95,  101,   94,  101,  102,  101,   93,  101,  101,  102,
      105,  102,   92,  102,  102,  102,  102,  103,  103,   91,
       90,   89,   88,  103,  105,   60,  104,   59,   58,  105,
      104,  105,  103,  105,   54,   50,  105,  103,  103,  103,
      104,  103,   47,   46,  103,  104,  106,  104,  106,  104,

       44,  104,  104,   43,  108,   30,   22,   21,   20,   18,
      106,    9,  109,    6,    5,  106,    3,  106,  108,  106,
        0,    0,  106,  108,    0,  108,  109,  108,  110,  111,
      108,  109,    0,  109,    0,  109,    0,    0,  109,  109,
        0,    0,  110,  111,  112,    0,    0,  110,  111,  110,
      111,  110,  111,    0,  110,  111,  111,  113,  112,    0,
        0,    0,    0,  112,    0,  112,  112,  112,  112,    0,
      112,  113,  114,  115,    0,  113,  113,    0,  113,    0,
      113,    0,    0,  113,    0,    0,  114,  115,  116,  117,
      114,  114,  115,  114,  115,  114,  115,    0,  114,  115,

        0,  117,  116,  117,  116,  118,    0,  116,  117,  116,
      117,  116,  117,  119,  116,  117,    0,    0,    0,  118,
        0,  139,    0,    0,  118,    0,  118,  119,  118,  140,
        0,  118,  119,    0,  119,  139,  119,  141,  119,  119,
      139,    0,  139,  140,  139,  139,    0,  139,  140,  139,
      140,  141,  140,  142,  143,  140,  141,  140,  141,    0,
      141,    0,  141,  141,  144,  142,    0,  142,  143,  144,
        0,    0,  142,  143,  142,  143,  142,  143,  144,  142,
      143,  145,    0,  144,  143,  144,    0,  144,  146,  146,
      144,    0,    0,    0,    0,  145,  147,  147,    0,    0,

      145,    0,  145,  146,  145,    0,    0,  145,  146,  146,
      146,  147,  146,  148,    0,  146,  147,  147,  147,    0,
      147,  149,  149,  147,  147,    0,    0,  148,    0,    0,
        0,    0,  148,    0,  148,  149,  148,  150,  150,  148,
      149,    0,  149,  149,  149,    0,    0,  149,    0,    0,
      152,  150,    0,    0,    0,    0,  150,    0,  150,  150,
      150,  150,  152,  150,  152,  153,  152,    0,    0,  152,
        0,  152,    0,  152,    0,    0,  152,    0,  154,  153,
      153,    0,    0,    0,  153,    0,  153,    0,  153,  153,
        0,  153,  154,  153,  154,  155,  156,  154,    0,  154,

        0,  154,    0,    0,  154,    0,    0,    0,    0,  155,
      156,  155,  157,    0,  155,  156,  155,  156,  155,  156,
      158,  155,  156,    0,  156,    0,  157,    0,  157,    0,
      159,  157,    0,  157,  158,  157,  160,    0,  157,  158,
      158,  158,    0,  158,  159,    0,  158,    0,    0,  159,
      160,  159,  161,  159,  160,  160,  159,  160,  162,  160,
        0,    0,  160,    0,  161,    0,  161,    0,  161,  177,
        0,  161,  162,  161,  162,  161,    0,  162,  161,  162,
      178,  162,    0,  177,  162,    0,    0,    0,  177,    0,
      177,  179,  177,    0,  178,  177,    0,  180,    0,  178,

        0,  178,    0,  178,    0,  179,  178,  178,  181,  179,
      179,  180,  179,    0,  179,    0,  180,  179,  180,  182,
      180,    0,  181,  180,    0,  183,    0,  181,    0,  181,
        0,  181,    0,  182,  181,  184,  185,    0,  182,  183,
      182,    0,  182,    0,  183,  182,  183,    0,  183,  184,
      185,  183,  183,  187,  184,  185,  184,  185,  184,  185,
        0,  184,  185,  188,  189,    0,    0,  187,    0,    0,
        0,    0,  187,    0,  187,  188,  187,  188,  189,  187,
      190,  187,  188,  189,  188,  189,  188,  189,  191,  188,
      189,    0,  189,    0,  190,    0,  192,    0,    0,  190,

        0,  190,  191,  190,  191,    0,  190,  191,    0,  191,
      192,  191,  193,    0,  191,  192,    0,  192,    0,  192,
        0,    0,  192,  194,  192,    0,  193,    0,    0,    0,
        0,  193,  196,  193,    0,  193,  195,  194,  193,  193,
        0,    0,  194,    0,  194,    0,  194,  196,  194,  194,
      195,    0,    0,  209,    0,  195,    0,  195,    0,  195,
        0,  196,  195,    0,  210,  209,  196,  209,  196,  209,
      196,    0,  209,  196,  209,  211,  209,    0,  210,  209,
      210,    0,    0,  210,    0,  210,  212,  210,    0,  211,
      210,  211,    0,    0,  211,    0,  211,    0,  211,  213,

      212,  211,    0,    0,    0,  212,  212,  212,    0,  212,
      214,  213,  212,  213,    0,  213,    0,    0,  213,    0,
      213,    0,  213,  215,  214,  213,    0,    0,    0,  214,
        0,  214,    0,  214,  216,  214,  214,  215,    0,    0,
        0,  215,  215,    0,  215,    0,  215,  217,  216,  215,
        0,    0,    0,  216,    0,  216,    0,  216,  218,  216,
      216,  217,    0,    0,    0,    0,  217,    0,  217,    0,
      217,  219,  218,  217,    0,    0,    0,  218,    0,  218,
        0,  218,    0,  218,  218,  219,  220,  219,    0,    0,
      219,    0,  219,    0,  219,    0,  221,  219,  220,    0,

      220,    0,  232,    0,    0,  220,    0,  220,    0,  220,
      221,    0,  220,  233,    0,  221,  232,  221,    0,  221,
        0,  232,  221,  232,  234,  232,    0,  233,  232,    0,
      232,    0,  233,    0,  233,  235,  233,    0,  234,  233,
        0,  233,    0,  234,    0,  234,  236,  234,    0,  235,
      234,    0,  234,  237,  235,    0,  235,  237,  235,    0,
      236,  235,  235,  237,    0,  236,    0,  236,  238,  236,
        0,  237,  236,    0,  239,    0,  237,    0,  237,    0,
      237,    0,  238,  237,  238,  240,    0,  238,  239,  238,
        0,  238,    0,  239,  238,  239,  241,  239,    0,  240,

      239,    0,  242,    0,  240,    0,  240,    0,  240,    0,
      241,  240,    0,  249,    0,  241,  242,  241,    0,  241,
        0,  242,  241,  242,    0,  242,  242,  249,  242,  250,
        0,    0,  249,    0,  249,    0,  249,  251,  249,  249,
        0,    0,    0,  250,    0,  252,    0,    0,  250,    0,
      250,  251,  250,  253,  250,  250,  251,    0,  251,  252,
      251,  252,  251,  251,  252,    0,  252,  253,  252,  254,
      255,  252,  253,    0,  253,    0,  253,    0,    0,  253,
      256,    0,    0,  254,  255,  254,  262,    0,  254,  255,
      254,  255,  254,  255,  256,  254,  255,    0,  260,  256,

      262,  256,  260,  256,    0,  262,  256,  262,  260,  262,
      261,    0,  262,    0,    0,  262,  260,    0,    0,    0,
        0,  260,    0,  260,  261,  260,  263,  268,  260,  261,
        0,  261,  261,  261,  261,    0,  261,    0,  263,    0,
      263,  268,  263,  269,    0,  263,  268,  263,  268,  263,
      268,    0,  263,  268,    0,    0,  270,  269,    0,  269,
        0,    0,  269,    0,  269,    0,  269,  271,    0,  269,
      270,  270,    0,    0,    0,  270,    0,  270,  272,  270,
        0,  271,  270,    0,  275,    0,  271,    0,  271,    0,
      271,    0,  272,  271,  271,  276,    0,  272,  275,  272,

        0,  272,    0,  275,  272,  275,  275,  275,  275,  276,
      275,  277,  278,    0,  276,    0,  276,    0,  276,    0,
        0,  276,    0,    0,  276,  277,  278,  281,  278,    0,
      277,  278,  277,  278,  277,  278,    0,  277,  278,    0,
      282,  281,  281,    0,    0,    0,  281,    0,  281,    0,
      281,  283,    0,  281,  282,    0,    0,  285,    0,  282,
        0,  282,    0,  282,    0,  283,  282,  282,    0,    0,
      283,  285,  283,  285,  283,    0,  285,  283,  285,    0,
      285,    0,    0,  285,  288,  288,  288,  290,    0,  290,
      292,  292,  292,  294,  294,  294,  295,  295,  295,  297,

      297,  297,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser/scanner.ll"
#line 2 "parser/scanner.ll"

#include "scanner.hh"
#include <cstdlib>

#define YY_NO_UNISTD_H

using token = yy::Parser::token;

#undef  YY_DECL
#define YY_DECL int Scanner::yylex( yy::Parser::semantic_type * const lval, yy::Parser::location_type *loc )

/* update location on matching */
#define YY_USER_ACTION loc->step(); loc->columns(yyleng);

#line 883 "/home/ebrio/Téléchargements/proj/build/scanner.cpp"
#line 884 "/home/ebrio/Téléchargements/proj/build/scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 26 "parser/scanner.ll"


#line 29 "parser/scanner.ll"
    yylval = lval;


#line 1023 "/home/ebrio/Téléchargements/proj/build/scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 287 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1603 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 32 "parser/scanner.ll"
return '+';
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 33 "parser/scanner.ll"
return '*';
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 34 "parser/scanner.ll"
return '-';
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 35 "parser/scanner.ll"
return '=';
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 36 "parser/scanner.ll"
return '/';
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 37 "parser/scanner.ll"
return '(';
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 38 "parser/scanner.ll"
return ')';
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 39 "parser/scanner.ll"
return '{';
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 40 "parser/scanner.ll"
return '}';
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 41 "parser/scanner.ll"
return '!';
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 42 "parser/scanner.ll"
return '[';
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 43 "parser/scanner.ll"
return ']';
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 44 "parser/scanner.ll"
return ':';
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 45 "parser/scanner.ll"
return ',';
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 46 "parser/scanner.ll"
return '%';
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 48 "parser/scanner.ll"
{
    std::cout << "commentaire multi ligne : " << YYText() << std::endl;
    yylval->build<std::string>(YYText());
    return token::COMMENTAIRE;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 54 "parser/scanner.ll"
{
    return token::POUR;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 58 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::RANGE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "parser/scanner.ll"
{
    return token::FINI;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 67 "parser/scanner.ll"
{
    return token::SI;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "parser/scanner.ll"
{
    return token::ALORS;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 75 "parser/scanner.ll"
{
    return token::SINON;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 79 "parser/scanner.ll"
{
    return token::FINSI;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "parser/scanner.ll"
{
    return token::EGAL;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 87 "parser/scanner.ll"
{
    return token::DIFFERENT;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 91 "parser/scanner.ll"
{
    return token::LESSEROREQUAL;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "parser/scanner.ll"
{
    return token::GREATEROREQUAL;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 99 "parser/scanner.ll"
{
    return token::LESSER;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "parser/scanner.ll"
{
    return token::GREATER;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 107 "parser/scanner.ll"
{
    return token::COULEUR;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 111 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::COULEURHEXA;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 116 "parser/scanner.ll"
{
    std::cout << "commentaire 1 ligne : " << YYText() << std::endl;
    yylval->build<std::string>(YYText());
    return token::COMMENTAIRE;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 122 "parser/scanner.ll"
{
    yylval->build<int>(yyleng-1); // yyleng donne la taille du texte
    return token::TITLE;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 126 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::TITLEID;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 130 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::UNIVTITLE;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 134 "parser/scanner.ll"
{
    return token::IMAGE;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 137 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::IMAGEID;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 141 "parser/scanner.ll"
{
    return token::PARAGRAPH;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 144 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::PARAGRAPHID;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 148 "parser/scanner.ll"
{
    return token::UNIVPARAGRAPH;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 151 "parser/scanner.ll"
{
    return token::UNIVPAGE;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 155 "parser/scanner.ll"
{
    return token::DEFINE;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 158 "parser/scanner.ll"
{
    return token::TITREPAGE;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 161 "parser/scanner.ll"
{
    std::cout << "encodage" << std::endl;
    return token::ENCODAGE;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 165 "parser/scanner.ll"
{
    return token::ICONE;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 168 "parser/scanner.ll"
{
    return token::CSS;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 171 "parser/scanner.ll"
{
    return token::LANGUE;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 175 "parser/scanner.ll"
{
    return token::LARGEUR;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 178 "parser/scanner.ll"
{
    return token::HAUTEUR;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 181 "parser/scanner.ll"
{
    return token::COULEURTEXTE;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 184 "parser/scanner.ll"
{
    return token::COULEURFOND;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 187 "parser/scanner.ll"
{
    return token::OPACITE;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 191 "parser/scanner.ll"
{
    return token::PIXEL;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 195 "parser/scanner.ll"
{
    return token::STYLE;
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 199 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::TEXT;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 204 "parser/scanner.ll"
{
    yylval->build<int>(std::atoi(YYText()));
    return token::NUMBER;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 209 "parser/scanner.ll"
{
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 212 "parser/scanner.ll"
{
    loc->lines();
    return token::NL;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 218 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::VAR;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 223 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText()); //l'on a choisi de ne pas mettre un accent a opacite
    return token::VARATTRIBUT;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 228 "parser/scanner.ll"
{
    return token::STYLESELEC;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 232 "parser/scanner.ll"
{
    return token::END;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 236 "parser/scanner.ll"
ECHO;
	YY_BREAK
#line 1507 "/home/ebrio/Téléchargements/proj/build/scanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 287 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 287 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 286);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 236 "parser/scanner.ll"



